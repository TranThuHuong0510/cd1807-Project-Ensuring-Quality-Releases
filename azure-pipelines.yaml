name: Azure Pipelines
trigger:
- master
 
pool: 
  vmImage: 'ubuntu-latest'

variables:
  ARM_CLIENT_ID: $(client_id)          #  client_id from Library
  ARM_CLIENT_SECRET: $(client_secret)    #  client_secret from Library
  ARM_TENANT_ID: $(tenant_id)            #  tenant_id from Library
  ARM_SUBSCRIPTION_ID: $(subscription_id) #  subscription_id from Library
  python.version: '3.7.6'
  azureServiceConnectionId: 'huongServiceConnection'
  projectRoot: $(System.DefaultWorkingDirectory)
  environmentName: 'test-vm-huong'
  webAppName: huongttt13-app-AppService

stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    #--------------------------------------------#  
    # Use Terraform to create the Infrastructure      
    # Install Terraform on the pipeline agent 
    - task: TerraformInstaller@2
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: 'latest'
    
    # Run Terraform Init on the pipeline agent 
    - task: TerraformCLI@2
      displayName: 'Terrafom init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        allowTelemetryCollection: true
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: ''
        backendAzureRmStorageAccountName: ''
        backendAzureRmContainerName: ''
        backendAzureRmKey: 'test.terraform.tfstate'

    - task: TerraformCLI@2
      displayName: Terraform validate
      inputs:
        command: 'validate'
        allowTelemetryCollection: true

    - task: TerraformCLI@0
      displayName: Terraform plan
      inputs:
        provider: "azurerm"
        command: "plan"
        environmentServiceNameAzureRM: "$(azureServiceConnectionId)"
        publishPlanResults: "huong-plan"
        commandOptions: "-out=$(System.DefaultWorkingDirectory)/terraform.tfplan -detailed-exitcode"
        workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test"
    
    # Run Terraform Apply
    - task: TerraformCLI@2
      displayName: Terraform apply
      condition: and(succeeded(), eq(variables['TERRAFORM_PLAN_HAS_CHANGES'], 'true'))
      inputs:
        provider: 'azurerm'
        command: 'apply'
        allowTelemetryCollection: true
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    # ToDo: Change the workingDirectory path, as applicable to you
    # Destroy the resources in Azure by running a separate pipeline. 
    # - task: TerraformTaskV3@3
    #   displayName: Terraform destroy
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'destroy'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

#--------------------------------------------#    
  - job: Testing
    dependsOn: BuildInfrastructure
    condition: succeeded()
    steps:
      - task: NodeTool@0
        displayName: Install NodeJS
        inputs:
          versionSpec: "16.x"
      - task: CmdLine@2
        displayName: Install NPM
        inputs:
          script: "sudo apt install npm -y"
          workingDirectory: "$(System.DefaultWorkingDirectory)"
      # Postman - Install Newman    
      - task: CmdLine@2
        displayName: Install Newman
        inputs:
          script: 'sudo npm install -g newman'
          workingDirectory: $(System.DefaultWorkingDirectory)
      # Postman Data Validation Test Suite    
      - task: CmdLine@2
        displayName: Run Data Validation Tests
        continueOnError: true
        inputs:
          script: 'newman run RunDataValidationTests.postman_collection.json -e huong-p3-evn.postman_environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
          workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
      # Postman Regression Test Suite    
      - task: CmdLine@2
        displayName: Run Regression Tests
        continueOnError: true
        inputs:
          script: 'newman run Regression_Tests.postman_collection.json -e huong-p3-evn.postman_environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
          workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
      # Postman - Publish Results 
      - task: PublishTestResults@2
        displayName: Publish Postman Results 
        inputs:
          testResultsFiles: "**/*report.xml"
          searchFolder: "$(System.DefaultWorkingDirectory)/automatedtesting/postman"
          mergeTestResults: true
          testRunTitle: "Run Test Report"
      #install pakage
      - task: CmdLine@2
        displayName: Install required packages
        inputs:
          script: "sudo apt install -y zip"
      # Selenium (UI) Test Suite - Archive the package  
      - task: ArchiveFiles@2
        displayName: 'Archive UI Tests'
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
      # Selenium Test Suite - Publish the package  
      - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip   # Same as the archiveFile artifact above. 
        displayName: 'Upload Package'
        artifact: drop-ui-tests

      #--------------------------------------------#    
      # FakeRestAPI - Archive
      - task: ArchiveFiles@2
        displayName: "Archive FakeRestAPI"
        inputs:
          rootFolderOrFile: "$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi"
          includeRootFolder: false
          archiveType: "zip"
          archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip"
      - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
        displayName: "Upload Package"
        artifact: drop-fakerestapi

      #--------------------------------------------#  
      # JMeter (Performance) Test Suite - Archive
      - task: ArchiveFiles@2
        displayName: "Archive PerformanceTestSuite"
        inputs:
          rootFolderOrFile: "$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/test-suite"
          includeRootFolder: false
          archiveType: "zip"
          archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip"
      - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
        displayName: "Upload Package"
        artifact: drop-perftests

#--------------------------------------------#  
# DEPLOYMENT STAGE
#--------------------------------------------#    
- stage: Deploy
  jobs:
  #--------------------------------------------#  
  # Deploy FakeRestAPI Web App
  - deployment: FakeRestAPI
    pool:
      vmImage: 'ubuntu-latest'      
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: "$(azureServiceConnectionId)"
              appName: "$(webAppName)"
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
          #--------------------------------------------#    
          # Run JMeter test suite against the App Service
          - task: CmdLine@2
            displayName:  'JMeter Test'
            inputs:
              script: |
                      wget "https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.6.3.tgz"
                      tar -xvzf apache-jmeter-5.6.3.tgz
                      unzip -o $(Build.BuildId)-perftests.zip
                      ./apache-jmeter-5.6.3/bin/jmeter -n -t stress-test.jmx --logfile stress-test.log
                      ./apache-jmeter-5.6.3/bin/jmeter -n -t endurance-test.jmx --logfile endurance-test.log
              workingDirectory: $(Pipeline.Workspace)/drop-perftests
              
  #--------------------------------------------#  
  # Selenium | Functional UI Tests
  - deployment: VMDeploy
    displayName: Selenium Tests
    environment:
      name:    $(environmentName)
      resourceType: VirtualMachine
      tags: selenium
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop-ui-tests     
          - task: NodeTool@0
            displayName: Install NodeJS 16
            inputs:
              versionSpec: "16.x"
          - task: Bash@3
            displayName: Run Selenium Tests
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                export PATH=$PATH:/usr/lib/chromium-browser/

                sudo add-apt-repository universe -y
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                pip3 install selenium

                # download chrome driver v100
                FILE=chromedriver_linux64.zip
                if [ -f "$FILE" ]; then
                  echo "$FILE exists."
                else
                  wget https://chromedriver.storage.googleapis.com/105.0.5195.52/chromedriver_linux64.zip
                fi
                
                # install chrome driver
                unzip chromedriver_linux64.zip
                sudo mv chromedriver /usr/bin/chromedriver
                sudo chown root:root /usr/bin/chromedriver
                sudo chmod +x /usr/bin/chromedriver
                chromium-browser -version
                chromedriver --version
                
                sudo mkdir -p /var/log/selenium
                sudo chmod 777 /var/log/selenium
                unzip -o $(Build.BuildId)-uitests.zip
                sudo python3 test-update-cart.py > selenium-out.log
                cat selenium-out.log
                sudo cp selenium-out.log /var/log/selenium/selenium-out.log
                sudo cp selenium-out.log /var/log
              workingDirectory: $(Pipeline.Workspace)/drop-ui-tests